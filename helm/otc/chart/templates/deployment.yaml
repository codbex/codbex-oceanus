{{- $isVolumeEnabled := (include "booleanToStringValue" (dict "value" .Values.volume.enabled)) | trim }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Values.name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      {{- if eq $isVolumeEnabled "true" }}
      volumes:
      - name: app-mount
        persistentVolumeClaim:
          claimName: {{ .Values.name }}-pvc
      {{- end }}
      containers:
      - name: {{ .Values.name }}
        image: {{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.ports.http }}
          name: http
          protocol: TCP
        {{- if .Values.resources }}
        resources: {{- toYaml .Values.resources | nindent 12 }}
        {{- end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        {{- if eq $isVolumeEnabled "true" }}
        volumeMounts:
        - mountPath: '/target'
          name: app-mount
        {{- end }}
        env:
        - name: DIRIGIBLE_BASIC_USERNAME
          value: {{ .Values.security.authentication.basic.base64User | quote }}
        - name: DIRIGIBLE_BASIC_PASSWORD
          value: {{ .Values.security.authentication.basic.base64Pass | quote }}
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        - name: "{{ .Values.image.pullSecrets }}"
      {{- end }}
